.TH MINIPRO 1 "14 August 2018 (v0.3)"
.SH NAME
minipro \- programs various chips using the Minipro TL866XX series of programmers.
.SH SYNOPSIS
.B minipro
.RB -l\ |\ -L " search"\ |\ -d " device"\ |\ -D\ |
.RB [-p " device"]
.RB [-c " code|data|config"]
.RB [-o " option"\ ...\ ]
.RB [-r|-w " filename"]
.RB [-e] [-u] [-P] [-i|-I] [-v] [-s|-S] [-x] [-y] [-V] [-t]
.RB [-T]
.RB [-f " ihex|srec"]
.RB [-F " filename"]
.RB [-h]

.B miniprohex
.RB [-p " device"]
.RB [-c " code|data|config"]
.RB [-r|-w " filename"]
.RB [-e] [-u] [-P] [-i|-I]

.SH DESCRIPTION
.I minipro
is an Open Source tool intended to become a complete cross-platform
replacement for the proprietary utility from Autoelectric. Currently it
supports more than 13000 of target devices - including AVRs, PICs as
well as a huge number of other microcontrollers and various memory
chips.


.SH OPTIONS
.TP
.B \-l
Get a list of supported devices.

.TP
.B \-L <search>
List devices beginning with this string.

.TP
.B \-d <device>
Show device information.

.TP
.B \-D
Just read the chip ID and do nothing else (like reading the whole chip
contents).  This is for use in scripts where you have for example
several similar chips with different IDs and want to check if the
currently inserted chip is one in your list of allowed ones. Also useful
to detect if a chip is inserted at all when using the -y option.

.TP
.B \-p <device>
Specify the device name.  If the desired device name contains a space,
parenthesis, or at sign; the device name MUST be surrounded by quotes.

.TP
.B \-c <type>
Optionally specify memory type.  Possible values include "code", "data",
and "config". The "config" memory type is used to access fuses, see
FUSES below.

.TP
.B \-o <option>

Specify various programming options. For multiple options use -o multiple
times. Valid options are:

.RS
.IP \(bu 4
vpp=<value>

Set the programming voltage (10, 12.5, 13.5, 14, 16, 18, 21).

.IP \(bu 4
vdd=<value>

Set the VDD write voltage (3.3, 4, 4.5, 5, 5.5, 6.25).

.IP \(bu 4
vcc=<value>

Set the VCC verify voltage (3.3, 4, 4.5, 5, 5.5, 6.25).

.IP \(bu 4
pulse=<value>

Set the programming pulse delay (0-65535 usec).
.RE

.TP
.B \-r <filename>
Read from the device and write the contents to this file.

.TP
.B \-w <filename>
Write to the device using this file.

.TP
.B \-e
Do NOT erase device.

.TP
.B \-u
Do NOT disable write-protect.

.TP
.B \-P
Do NOT enable write-protect.

.TP
.B \-v
Do NOT verify after write.

.TP
.B \-i
Use ICSP.

.TP
.B \-I
Use ICSP (without enabling Vcc).

.TP
.B \-s
Do NOT error on file size mismatch (only a warning).

.TP
.B \-S
No warning message for file size mismatch (can't combine with -s).

.TP
.B -x
Do NOT attempt to read ID (only valid in read mode).  Avoids sending
high Chip ID read voltages to unknown pins.

.TP
.B \-y
Do NOT error on ID mismatch.

.TP
.B \-T
Run a logic IC test.

Errorneous states are reported with a "-" (minus) sign next to the expected
pin state.

.TP
.B \-V
Show version information.

.TP
.B \-t
Start hardware check.

.TP
.B \-f <ihex | srec>
Specify the file format: either Intel ihex or Motorola srecord.

When writing chips, this is not necessary because the file format is
automatically detected.  There is no need to specify the exact Intex hex
format (ihex8, ihex16, or ihex32) as the format is automatically
detected.  If this option is not used, then the file will be saved as a
raw binary file.

When reading chips and the ihex format is chosen, if the data size is up
to 64Kb the file will be saved in ihex8 format. Just plain hex records
are used -- no segment/linear address records are inserted.  If the data
size exceeds 64Kb then the ihex32 format is used. The ihex16 format is
not used when reading chips.  The same strategy is used for the Motorola
srecord format.

.TP
.B \-F <filename>
Update firmware (should be update.dat).

.TP
.B \-h
Show help and quit.

.SH NOTES

If
.B -c
is omitted and
.B -r
is specified then the code, data (if applicable) and config (if
applicable) will be written to filename.$ext, filename.eeprom.bin and
filename.fuses.conf correspondingly. If
.B -c
is omitted and
.B -w
is specified, then
.B -c code
is assumed.

The
.B -i
and
.B -I
options enable use of ICSP port for TL866A and TL866II+ models. The
former enables the voltage supply on the Vcc pin of the ICSP port while
the latter leaves it off.  These options are of no use for the TL866CS.

The Minipro TL866xx series of chip programmers is distributed by
Autoelectric.  Their website is
.BR http://www.autoelectric.cn.

.SH PIPES

.B Minipro
supports reading and writing to standard input and output.  To do this,
use a dash (-) as a filename for the
.B -w
or
.B -r
options.

For example:

head -c 256k < /dev/urandom | srec_cat - -bin -o - -intel -Address_Length=4 -obs=16 | minipro -p w49f002u -w-

This is how the hex/srec parsers were tested for reading from stdin.
256kb of random binary data is generated then converted from binary to
intel hex by the srec_cat utility. Finally the converted data is passed
to our minipro which will read this data, convert it to binary by
decoding the intel hex format from stdin and write it to the specified
chip.  Note the -r- which tells to read from stdin instead from a
regular file.  This is just a test command to test the ihex/srec
parsers.  Don't use this in real life (convert from binary to ihex then
from ihex to binary).

You can also read a chip and write the data to the stdout like this:

minipro -p w49f002u -r- -f ihex.

You can then pass the output to another command line tool with | for
other processing, etc.

.SH FUSES

Fuses can be read and written with the
.B -c config
option. Fuse data is exchanged in a text format. When writing fuses
all fuses on your device must be assigned a value. To see what fuses
are supported by your device use
.B -r
with
.B -c config
to get your current fuse values. This also shows you what the text
format looks like.

.SH EXAMPLES

.IP "\fBminipro -p 7404 -T\fR" 4
Check whether a 74(LS/HC/...)04 hex NOT gate chip.

.SH AUTHOR
.I minipro
was written by Valentin Dudouyt and is copyright 2014.  Many others
have contributed code and bug reports.  Development is currently coordinated
by David Griffith.

.SH DISTRIBUTION
The canonical repository for
.I minipro
is at Gitlab:
.br
.BR https://gitlab.com/DavidGriffith/minipro/
.br
It is distributed under the GNU General Public License version 3 or (at
your option) any later version.
.br
.BR https://www.gnu.org/licenses/gpl-3.0.en.html
.br
This software is offered as-is with no warranty or liability.  If you
find a bug or would like minipro to do something it doesn't currently
do, please visit the above Gitlab website and report your concerns.
